# -*- coding: utf-8 -*-
"""Ozone level prediction model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mnvGwRK2RSYYKvcJtQxl3EZNedRnFAnl
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import sklearn.datasets
from sklearn import svm
from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.svm import SVC

# 1. Load Data
# Replace 'your_dataset.csv' with your actual data file
data = pd.read_csv('PRSA_Data_Dingling_20130301-20170228.csv')

data = data.dropna()

data.head()

data.shape

data.info()

data.describe()

X = data[['TEMP']]
y = data['O3']

y.head()
X.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.02, random_state=2)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
from sklearn.metrics import mean_squared_error, r2_score
from math import sqrt
y_pred = model.predict(X_test)
temp = data['TEMP'][:len(y_pred)]
x_train_prediction = model.predict(X_train)

# Use appropriate metrics for regression
mse = mean_squared_error(y_train, x_train_prediction)
r2 = r2_score(y_train, x_train_prediction)

print('Mean Error of trained data:',sqrt(mse))
print('R-squared of trained data:', r2)

# Plot actual vs predicted values

plt.plot([min(y_test), max(y_test)], [min(y_pred), max(y_pred)], color='red')  # Straight line

plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Ozone Levels')
plt.show()

plt.scatter(temp,y_pred)
plt.xlabel("Temperature")
plt.ylim(0,30)
plt.xlim(0,30)
plt.ylabel(" Predicted Ozone")
plt.show()

# Use appropriate metrics for regression
from sklearn.metrics import mean_squared_error, r2_score
from math import sqrt

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)  # Use y_test instead of x_train_prediction
rmse = sqrt(mse)
r2 = r2_score(y_test, y_pred)  # Use y_test instead of x_train_prediction

print('Root Mean Squared Error of test data:', rmse)
print('R-squared of test data:', r2)