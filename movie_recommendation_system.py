# -*- coding: utf-8 -*-
"""Movie Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/187QIsQ7cUboKHLyxKXqoqHvkkahlznbx
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
import seaborn as sns

!wget https://www.dropbox.com/s/zpjqx685en4hllf/ratings.csv

import pandas as pd
import numpy as np

# Load the movie details
movie_details = pd.read_csv('movies_metadata.csv')
ratings_details=pd.read_csv('ratings.csv')
# Identify non-numeric values in 'movieId'
non_numeric_movie_ids = movie_details['movieId'][pd.to_numeric(movie_details['movieId'], errors='coerce').isna()]

print("Non-numeric movie IDs:")
print(non_numeric_movie_ids)

# Option 1: Remove rows with non-numeric movie IDs
movie_details_cleaned = movie_details[pd.to_numeric(movie_details['movieId'], errors='coerce').notna()]
movie_details_cleaned['movieId'] = movie_details_cleaned['movieId'].astype(np.int64)

# Option 2: Replace non-numeric movie IDs with a placeholder (e.g., -1)
movie_details['movieId'] = pd.to_numeric(movie_details['movieId'], errors='coerce').fillna(-1).astype(np.int64)

# Proceed with your analysis using either movie_details_cleaned or movie_details

ratings_details.head()

movie_details.head()

movie_details.shape

ratings_details.shape

ratings_details.describe()

movie_details.describe()

movie_details.info()

ratings_details.info()

movie_details['original_language'].value_counts()[0:5]

dataset=pd.merge(ratings_details,movie_details,on='movieId')
dataset.tail()

import datetime
from datetime import datetime,date
dataset['datetime']=pd.to_datetime(dataset['timestamp'])
dataset.head()

dataset.shape

dataset.nunique()

dataset.describe()

a=dataset
a=a.groupby('title')['rating'].mean()
a

sorted_ratings_wise_movie=a.sort_values(ascending=False)
sorted_ratings_wise_movie

b=dataset
b=b.groupby('title')['rating'].count()
b.tail()

new_record=pd.DataFrame()
new_record['Average_Rating']=a
new_record['Total_Ratings']=b
new_record.head()

new_record.columns

plt.figure(figsize=(5,5))
new_record['Total_Ratings'].hist(bins=50)
plt.show()

plt.figure(figsize=(10,4))
new_record['Average_Rating'].hist(bins=70,color='red')
plt.show()

plt.figure(figsize=(8,6))
sns.jointplot(x='Average_Rating',y='Total_Ratings',data=new_record,alpha=0.7)
plt.show()

moviematrix=dataset.pivot_table(index='userId',columns='title',values='rating')

moviematrix.head()

moviematrix.columns

moviematrix["I'll Sleep When I'm Dead"].head()

rating=moviematrix["I'll Sleep When I'm Dead"]
rating.tail()

similar_rating=moviematrix.corrwith(rating)
similar_rating

# Convert 'FALSE' and other potential non-numerical values to numerical representations.
# For example, you can replace 'FALSE' with 0 and 'TRUE' with 1 if they exist in your dataset.
dataset = dataset.replace('FALSE', 0)
dataset = dataset.replace('TRUE', 1)

# If there are other non-numerical columns that are not relevant for correlation, drop them.
# Identify non-numerical columns
non_numeric_cols = dataset.select_dtypes(exclude=['number']).columns
# Drop non-numerical columns
dataset_numeric = dataset.drop(non_numeric_cols, axis=1)

# Now try calculating the correlation matrix again
corelation_metrics = dataset_numeric.corr()

fig = plt.figure(figsize=(14,9))
sns.heatmap(corelation_metrics, annot=True, vmax=1, square=True)
plt.show()

movie_corelation=pd.DataFrame(similar_rating,columns=['Correlation'])
movie_corelation.dropna(inplace=True)
movie_corelation